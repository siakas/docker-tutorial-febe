import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient({
  log: ["query", "info", "warn", "error"], // „É≠„Ç∞Âá∫Âäõ„ÇíÊúâÂäπÂåñ
});

async function main() {
  console.log("üîç Prisma„ÅÆÂü∫Êú¨Êìç‰Ωú„Çí„ÉÜ„Çπ„Éà„Åó„Åæ„Åô\n");

  // 1. ÂÖ®Á§æÂì°„ÇíÂèñÂæóÔºàÈÉ®ÁΩ≤ÊÉÖÂ†±„ÇÇÂê´„ÇÄÔºâ
  console.log("1Ô∏è‚É£ ÂÖ®Á§æÂì°„ÇíÂèñÂæó:");
  const allEmployees = await prisma.employee.findMany({
    include: {
      department: true, // „É™„É¨„Éº„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇÇÂèñÂæó
    },
    where: {
      isActive: true, // „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™Á§æÂì°„ÅÆ„Åø
    },
  });
  console.log(`„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™Á§æÂì°Êï∞: ${allEmployees.length}Âêç`);
  console.log("ÊúÄÂàù„ÅÆ3Âêç:");
  allEmployees.slice(0, 3).forEach((emp) => {
    console.log(
      `  - ${emp.lastName} ${emp.firstName} (${emp.department.name})`,
    );
  });

  // 2. ÁâπÂÆö„ÅÆÈÉ®ÁΩ≤„ÅÆÁ§æÂì°„ÇíÂèñÂæó
  console.log("\n2Ô∏è‚É£ ÈñãÁô∫ÈÉ®„ÅÆÁ§æÂì°„ÇíÂèñÂæó:");
  const devEmployees = await prisma.employee.findMany({
    where: {
      department: {
        name: "ÈñãÁô∫ÈÉ®",
      },
    },
    select: {
      employeeId: true,
      lastName: true,
      firstName: true,
      position: true,
      salary: true,
    },
  });
  devEmployees.forEach((emp) => {
    console.log(
      `  - ${emp.employeeId}: ${emp.lastName} ${emp.firstName} (${emp.position})`,
    );
  });

  // 3. ÈõÜË®à„ÇØ„Ç®„É™
  console.log("\n3Ô∏è‚É£ ÈÉ®ÁΩ≤Âà•„ÅÆÁµ±Ë®à:");
  const departmentStats = await prisma.department.findMany({
    include: {
      _count: {
        select: { employees: true },
      },
      employees: {
        select: {
          salary: true,
        },
        where: {
          isActive: true,
        },
      },
    },
  });

  for (const dept of departmentStats) {
    const salaries = dept.employees
      .map((e) => (e.salary ? Number(e.salary) : 0))
      .filter((s) => s > 0);

    const avgSalary =
      salaries.length > 0
        ? salaries.reduce((a, b) => a + b, 0) / salaries.length
        : 0;

    console.log(`  ${dept.name}:`);
    console.log(`    - Á§æÂì°Êï∞: ${dept._count.employees}Âêç`);
    console.log(`    - Âπ≥ÂùáÁµ¶‰∏é: ¬•${avgSalary.toLocaleString()}`);
  }

  // 4. Ê§úÁ¥¢„ÇØ„Ç®„É™ÔºàÂêçÂâç„ÅßÊ§úÁ¥¢Ôºâ
  console.log('\n4Ô∏è‚É£ ÂêçÂâç„ÅßÊ§úÁ¥¢Ôºà"Áî∞"„ÇíÂê´„ÇÄÔºâ:');
  const searchResults = await prisma.employee.findMany({
    where: {
      OR: [{ lastName: { contains: "Áî∞" } }, { firstName: { contains: "Áî∞" } }],
    },
    select: {
      lastName: true,
      firstName: true,
      email: true,
    },
  });
  searchResults.forEach((emp) => {
    console.log(`  - ${emp.lastName} ${emp.firstName} (${emp.email})`);
  });

  // 5. „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥
  console.log("\n5Ô∏è‚É£ „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥Ôºà1„Éö„Éº„Ç∏3‰ª∂Ôºâ:");
  const page1 = await prisma.employee.findMany({
    take: 3,
    skip: 0,
    orderBy: {
      employeeId: "asc",
    },
    select: {
      employeeId: true,
      lastName: true,
      firstName: true,
    },
  });
  console.log("  „Éö„Éº„Ç∏1:");
  page1.forEach((emp) => {
    console.log(`    - ${emp.employeeId}: ${emp.lastName} ${emp.firstName}`);
  });

  // 6. „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥‰æã
  console.log("\n6Ô∏è‚É£ „Éà„É©„É≥„Ç∂„ÇØ„Ç∑„Éß„É≥ÔºàÈÉ®ÁΩ≤„ÅÆÁ§æÂì°Êï∞„Çí„Ç´„Ç¶„É≥„ÉàÔºâ:");
  const [totalEmployees, totalDepartments, activeCount] =
    await prisma.$transaction([
      prisma.employee.count(),
      prisma.department.count(),
      prisma.employee.count({ where: { isActive: true } }),
    ]);
  console.log(`  - ÂÖ®Á§æÂì°Êï∞: ${totalEmployees}Âêç`);
  console.log(`  - ÈÉ®ÁΩ≤Êï∞: ${totalDepartments}`);
  console.log(`  - „Ç¢„ÇØ„ÉÜ„Ç£„ÉñÁ§æÂì°: ${activeCount}Âêç`);
}

main()
  .then(async () => {
    await prisma.$disconnect();
    console.log("\n‚úÖ „ÉÜ„Çπ„ÉàÂÆå‰∫ÜÔºÅ");
  })
  .catch(async (e) => {
    console.error("‚ùå „Ç®„É©„Éº:", e);
    await prisma.$disconnect();
    process.exit(1);
  });
